/**
*
* @file main.c
*
* This file contains a design example using the driver functions
* of the XADC driver. The example here shows the driver/device in polled mode
* to check the voltage on ADC 14. This example is highly inspired by Xilinx
* standard example on how to use the XADC module.
*
* @note
*
*
*
* <pre>
*
* MODIFICATION HISTORY:
*
* Ver   Who   Date      Changes
* ----- ----  --------  -----------------------------------------------------
* 1.00a jcla  31/03/16  First release based on the Xilinx XADC example driver
*
* </pre>
*
*****************************************************************************/

/***************************** Include Files ********************************/
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xparameters.h"
#include "bram.h"
#include "xadcps.h"
#include "xstatus.h"
#include <unistd.h>


#include "core_portme.h"

/************************** Constant Definitions ****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define XADC_DEVICE_ID 		XPAR_XADCPS_0_DEVICE_ID

/**************************** Marco Definitions ******************************/


/************************** Function Prototypes *****************************/

static int XAdcGetVoltageFromRegisters(u16 XAdcDeviceId, int *voltage, int register_offset);
static int XAdcFractionToInt(float FloatNum);


/***************** Macros (Inline Functions) Definitions ********************/

#define printf xil_printf /* Small foot-print printf function */

// converting RAW data from external sourse to voltage
#define XAdcPs_ExternalRawToVoltage(AdcData)\
	((((float)(AdcData))* (1.0f))/65536.0f)

/************************** Variable Definitions ****************************/

static XAdcPs XAdcInst;      /* XADC driver instance */

/****************************************************************************/


int main(void)
{
	init_platform();

	//BRAM
	initMemory();

	//XADC
	int voltage_reading = 0; // Result is in mV going from 0V = 0 to 1000 = 3.3V
	int voltage = 0;

	print("Hello XADC!\n");

	int Status;

	// Get user input
	float battery_voltage;
	xil_printf("Enter the battery voltage:\r\n");
	scanf("%d", &battery_voltage);

	int battery_amp;
	xil_printf("Enter the battery milliamps:\r\n");
	scanf("%d", &battery_amp);

	xil_printf("The battery voltage is --> %d%d\r\n",(int)battery_voltage, XAdcFractionToInt(battery_voltage));
	xil_printf("The battery amp is --> %d\r\n", battery_amp);

	while (1)
	{
		Status = XAdcGetVoltageFromRegisters(XADC_DEVICE_ID, &voltage_reading, 0); // read from A0
		//Status = XAdcGetVoltageFromRegisters(XADC_DEVICE_ID, &voltage_reading, 9); // read from A1
		if (Status != XST_SUCCESS) {
			printf("Failed reading from ADC");
			return XST_FAILURE;
		}
		voltage = (voltage_reading*3.3)/1000.0;

		MYMEM_u(0)=CombineForBram(0b1, 0b10); // using memory addr 0

		//Writes to BRAM
		//MYMEM_u(0)=2; BRAM address 0
		//MYMEM_u(1)=1; BRAM address 0x4

	}

	cleanup_platform();
	return XST_SUCCESS;
}


/****************************************************************************/
/**								Reading voltage
****************************************************************************/
int XAdcGetVoltageFromRegisters(u16 XAdcDeviceId, int *voltage, int register_offset)
{
	int Status;
	XAdcPs_Config *ConfigPtr;
	u32 VccPdroRawData;
	float VccPintData;
	XAdcPs *XAdcInstPtr = &XAdcInst;

	/*
	 * Initialize the XAdc driver.
	 */
	ConfigPtr = XAdcPs_LookupConfig(XAdcDeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	XAdcPs_CfgInitialize(XAdcInstPtr, ConfigPtr, ConfigPtr->BaseAddress);

	/*
	 * Self Test the XADC/ADC device
	 */
	Status = XAdcPs_SelfTest(XAdcInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Read the A1 input Voltage Data from the
	 * ADC data registers.
	 */
	VccPdroRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_AUX_MIN+register_offset);
	VccPintData = XAdcPs_ExternalRawToVoltage(VccPdroRawData);


	(*voltage) = XAdcFractionToInt(VccPintData);

	return XST_SUCCESS;
}

/****************************************************************************/
/*
*
* This function converts the fraction part of the given floating point number
* (after the decimal point)to an integer.
*
* @param	FloatNum is the floating point number.
*
* @return	Integer number to a precision of 3 digits.
*
* @note
* This function is used in the printing of floating point data to a STDIO device
* using the xil_printf function. The xil_printf is a very small foot-print
* printf function and does not support the printing of floating point numbers.
*
*****************************************************************************/
int XAdcFractionToInt(float FloatNum)
{
	float Temp;

	Temp = FloatNum;
	if (FloatNum < 0)
	{
		Temp = -(FloatNum);
	}

	return( ((int)((Temp -(float)((int)Temp)) * (1000.0f))));
}

/****************************************************************************/
/**				     	Combining data for bram
****************************************************************************/
int CombineForBram(int battery_thresh, int pwm_inc)
{
	int result_pwm = 0b011;
	int result_bat = 0b001;
	int result;
	result_pwm = result_pwm & pwm_inc;

	result_bat = result_bat & battery_thresh;
	result_bat = result_bat << 2;

	result = result_pwm | result_bat;

	return result;
}

